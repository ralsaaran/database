image: maven

variables:
  # MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  # MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

  # This will suppress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  BASE_REPOSITORY_URL: $CI_REGISTRY/h1504/backend-h-149

cache:
  paths:
    - .m2/repository/
    - target/

stages:
  - build
  - containerize
  - deploy

build:
  stage: build
  script:
    - chmod +x mvnw
    - ./mvnw clean install -Dmaven.test.skip=true
  artifacts:
    paths:
      - target/*.jar

.containerize:
  stage: containerize
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $REPOSITORY_URL .
    - docker push $REPOSITORY_URL

containerize_dev:
  extends: .containerize
  variables:
    REPOSITORY_URL: ${BASE_REPOSITORY_URL}:dev
  environment:
    name: development
  only:
    - development

containerize_prod:
  extends: .containerize
  variables:
    REPOSITORY_URL: ${BASE_REPOSITORY_URL}:prod
  environment:
    name: production
  only:
    - master

.deploy:
  stage: deploy
  image: python:latest
  script:
    - echo $TASK_DEF_FILE > task-h-149.json
    - pip install awscli
    - aws ecs register-task-definition
      --family $TASK_DEF_NAME
      --requires-compatibilities FARGATE
      --cli-input-json file://task-h-149.json
      --region $AWS_REGION
    - aws ecs update-service
      --cluster $ECS_CLUSTER
      --service h-149
      --task-definition $TASK_DEF_NAME
      --region $AWS_REGION

deploy_dev:
  extends: .deploy
  variables:
    ECS_CLUSTER: h-149-dev
    TASK_DEF_NAME: task-h-149-dev
    TASK_DEF_FILE: $TASK_DEF_FILE_DEV_JSON
  environment:
    name: development
  only:
    - development

deploy_prod:
  extends: .deploy
  variables:
    ECS_CLUSTER: h-149-prod
    TASK_DEF_NAME: task-h-149-prod
    TASK_DEF_FILE: $TASK_DEF_FILE_PROD_JSON
  environment:
    name: production
  when: manual
  allow_failure: false
  only:
    - master